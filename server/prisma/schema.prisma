// server/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String   // Added password field
  role      Role     @default(STAFF)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  
  // Relations
  createdOrders Order[] @relation("OrderCreatedBy")
  
  @@index([email])
  @@index([role])
}

enum Role {
  ADMIN     // Can create/delete users, full access
  MANAGER   // Can manage inventory and orders
  STAFF     // Can only view/update orders
}

model Order {
  id                String      @id @default(cuid())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  name              String
  phone             String
  location          String
  cnic              String?
  prescriptionFile  String?
  prescriptionFileName String?
  mapLocation       String?
  doctorRecommended Boolean     @default(false)
  total             Decimal     @db.Decimal(10, 2)
  status            OrderStatus @default(RECEIVED)
  assignedTo        String?     // User ID who is handling this order
  notes             String?     // Internal notes
  items             OrderItem[]
  
  // Relations
  assignedUser      User?       @relation("OrderCreatedBy", fields: [assignedTo], references: [id])

  @@index([createdAt])
  @@index([status])
  @@index([assignedTo])
}

enum OrderStatus {
  RECEIVED    // Just received
  PROCESSING  // Being prepared
  OUT_FOR_DELIVERY // In delivery
  COMPLETED   // Delivered
  CANCELLED   // Cancelled
}

model OrderItem {
  id        String  @id @default(cuid())
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  medId     Int?
  name      String
  price     Decimal @db.Decimal(10, 2)
  qty       Int

  @@index([orderId])
}

model Medicine {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  category    String
  price       Decimal   @db.Decimal(10, 2)
  description String
  image       String
  inStock     Boolean   @default(true)
  stockCount  Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([category])
  @@index([inStock])
}

model SystemSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  updatedAt   DateTime @updatedAt
  updatedBy   String?  // User ID who last updated
  
  @@index([key])
}